{"version":3,"sources":["components/routes/FinalizeClaim.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","withStyles","theme","snackbar","maxWidth","success","backgroundColor","palette","main","warning","error","rightIcon","marginLeft","spacing","unit","close","white","color","withRouter","a","createElement","variant","gutterBottom"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,MAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,MAsCeS,+BArBA,SAAAC,GAAK,MAAK,CACvBC,SAAU,CACRC,SAAU,OAEZC,QAAS,CACPC,gBAAiBJ,EAAMK,QAAQF,QAAQG,MAEzCC,QAAS,CACPH,gBAAiBJ,EAAMK,QAAQG,MAAMF,MAEvCG,UAAW,CACTC,WAAYV,EAAMW,QAAQC,MAE5BC,MAAO,CACLH,WAAYV,EAAMW,QAAQC,KAAO,GAEnCE,MAAO,CACLC,MAAO,WAIIhB,CAAmBiB,YAAW,WAC3C,OACEtB,EAAAuB,EAAAC,cAACpB,EAAA,EAAD,CAAYqB,QAAQ,KAAKC,cAAY,EAACL,MAAM,eAA5C","file":"static/js/31.1c382523.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router'\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { Typography } from '@material-ui/core';\n// import { Button, TextField } from '@material-ui/core';\n// import { Snackbar, SnackbarContent } from '@material-ui/core';\n// import IconButton from '@material-ui/core/IconButton';\n// import CloseIcon from '@material-ui/icons/Close';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import FileCopyIcon from '@material-ui/icons/FileCopy';\n// import { Link } from 'react-router-dom'\n//\n// import TransactionButton from '../common/TransactionButton'\n// import Copyable from '../common/Copyable'\n// import { getContract } from '../../common/utilities'\n\nconst styles = theme => ({\n  snackbar: {\n    maxWidth: '45%'\n  },\n  success: {\n    backgroundColor: theme.palette.success.main\n  },\n  warning: {\n    backgroundColor: theme.palette.error.main\n  },\n  rightIcon: {\n    marginLeft: theme.spacing.unit\n  },\n  close: {\n    marginLeft: theme.spacing.unit / 2\n  },\n  white: {\n    color: \"white\"\n  }\n})\n\nexport default withStyles(styles)(withRouter(function FinalizeClaim () {\n  return (\n    <Typography variant='h4' gutterBottom color=\"textPrimary\">\n      Coming soon!\n    </Typography>\n  )\n}))\n//\n//   this.state = {\n//     finalizeAddress: '',\n//     finalizeSecret:  '',\n//     finalizeHydroId: '',\n//     claimAddress:    '',\n//     activeClaim:     undefined,\n//     claimSnackbar:   false,\n//     addressSnackbar: false\n//   }\n//\n//   const state = this.props.location.state || {}\n//   const claim = this.getClaim()\n//\n//   // try to set state from url\n//   if (state.address || state.secret || state.hydroId)\n//     this.state = {\n//       ...this.state,\n//       finalizeAddress: state.address,\n//       finalizeSecret:  state.secret,\n//       finalizeHydroId: state.hydroId,\n//       activeClaim:     {address: state.address, secret: state.secret, hydroId: state.hydroId},\n//       claimSnackbar:   true\n//     }\n//   // try to get claim from session storage\n//   else if (claim)\n//     this.state = {\n//       ...this.state,\n//       finalizeAddress: claim.address,\n//       finalizeSecret:  claim.secret,\n//       finalizeHydroId: claim.hydroId,\n//       activeClaim:     claim,\n//       claimSnackbar:   true\n//     }\n//\n//   // show snackbar if we need to\n//   if (\n//     this.state.activeClaim &&\n//     (this.props.w3w.account.toLowerCase() !== this.state.finalizeAddress.toLowerCase())\n//   )\n//     this.state = {\n//       ...this.state,\n//       addressSnackbar: true\n//     }\n//\n//   // get random value for new claims in case we need it\n//   const randomValues = new Uint32Array(1)\n//   window.crypto.getRandomValues(randomValues)\n//   this.hashedSecret = this.props.w3w.web3js.utils.sha3(randomValues[0].toString())\n// }\n//\n// getClaimKey() {\n//   return this.getContract('snowflake')._address\n// }\n//\n// getClaim() {\n//   let claim = sessionStorage.getItem(this.getClaimKey())\n//   return claim ? JSON.parse(claim) : null\n// }\n//\n// setClaim(address, secret, hydroId) {\n//   const claim = {address: address, secret: secret, hydroId: hydroId}\n//   sessionStorage.setItem(this.getClaimKey(), JSON.stringify(claim))\n// }\n//\n// removeClaim() {\n//   sessionStorage.removeItem(this.getClaimKey())\n// }\n//\n// deleteLocalClaim = () => {\n//   this.setState({\n//     finalizeAddress: '',\n//     finalizeSecret:  '',\n//     finalizeHydroId: '',\n//     activeClaim:     undefined,\n//     claimSnackbar:   false,\n//     addressSnackbar: false,\n//   })\n//\n//   this.removeClaim()\n//\n//   if (this.props.location.state)\n//     this.props.history.replace({\n//       ...this.props.location,\n//       state: {}\n//     })\n// }\n//\n// getUrlFromClaim = (claim) => {\n//   return !this.state.activeClaim ? '' :\n//     [\n//       window.location.origin,\n//       process.env.PUBLIC_URL,\n//       this.props.location.pathname,\n//       `/${claim.address}/${claim.secret}/${claim.hydroId}`\n//     ].join('')\n// }\n//\n// updateLocalClaim() {\n//   const { claimAddress } = this.state\n//   const { hydroId } = this.props\n//   const claim = this.props.w3w.web3js.utils.soliditySha3(claimAddress.toLowerCase(), this.hashedSecret, hydroId)\n//   this.claim = {address: claimAddress, secret: this.hashedSecret, hydroId: hydroId, claim: claim}\n// }\n//\n// render() {\n//   const { classes } = this.props\n//\n//   return (\n//     <div>\n//       <Snackbar\n//         anchorOrigin={{\n//           vertical: 'bottom',\n//           horizontal: 'left',\n//         }}\n//         autoHideDuration={10000}\n//         className={this.props.classes.snackbar}\n//         open={this.state.claimSnackbar}\n//         onClose={(e, reason) => reason === \"clickaway\" ? null : this.setState({ claimSnackbar: false })}\n//       >\n//         <SnackbarContent\n//           className={this.props.classes.success}\n//           message={<p>Claim detected! We{\"'\"}ve pre-filled the fields above.</p>}\n//           action={[\n//             <Button\n//               key=\"clear\"\n//               size=\"small\"\n//               onClick={this.deleteLocalClaim}\n//               className={classes.white}\n//             >\n//               Delete Claim\n//               <DeleteIcon className={classes.rightIcon} />\n//             </Button>,\n//             <IconButton\n//               key=\"close\"\n//               color=\"inherit\"\n//               className={classes.close}\n//               onClick={() => this.setState({claimSnackbar: false})}\n//             >\n//               <CloseIcon />\n//             </IconButton>\n//           ]}\n//         />\n//       </Snackbar>\n//\n//       {this.props.hydroId ? null :\n//         <Button variant=\"contained\" color=\"primary\" component={Link} to=\"/\">Need a Snowflake?</Button>\n//       }\n//\n//       {!this.state.activeClaim ? null :\n//         <Snackbar\n//           anchorOrigin={{\n//             vertical: 'bottom',\n//             horizontal: 'right',\n//           }}\n//           className={this.props.classes.snackbar}\n//           open={this.state.addressSnackbar}\n//           onClose={(e, reason) => reason === \"clickaway\" ? null : this.setState({ addressSnackbar: false })}\n//         >\n//           <SnackbarContent\n//             className={this.props.classes.warning}\n//             message={\n//               <p>\n//                 Please switch to {this.state.activeClaim.address}, or visit the link to the right.\n//               </p>\n//             }\n//             action={[\n//               <Copyable key=\"copy\" placement=\"top\" value={this.getUrlFromClaim(this.state.activeClaim)}>\n//                 <Button\n//                   key=\"clear\"\n//                   size=\"small\"\n//                   className={classes.white}\n//                 >\n//                   Copy Link\n//                   <FileCopyIcon className={classes.rightIcon} />\n//                 </Button>\n//               </Copyable>\n//             ]}\n//           />\n//         </Snackbar>\n//       }\n//\n//\n//       <Typography variant='display1' gutterBottom color=\"textPrimary\">\n//         Finalize a Claim\n//       </Typography>\n//\n//       <Typography variant='body2' gutterBottom color=\"textPrimary\">\n//         Click below to finalize linking an address to your Snowflake.\n//       </Typography>\n//\n//       <TextField\n//         label='Hydro ID'\n//         margin=\"normal\"\n//         value={this.state.finalizeHydroId}\n//         onChange={e => this.setState({finalizeHydroId: e.target.value})}\n//         disabled={!!this.state.activeClaim}\n//         fullWidth\n//       />\n//\n//       <TextField\n//         label='Secret'\n//         type=\"password\"\n//         margin=\"normal\"\n//         value={this.state.finalizeSecret}\n//         onChange={e => this.setState({finalizeSecret: e.target.value})}\n//         disabled={!!this.state.activeClaim}\n//         fullWidth\n//       />\n//\n//       <TransactionButton\n//         buttonInitial='Finalize Claim'\n//         method={() => this.getContract('snowflake').methods.finalizeClaim(\n//           this.getClaim().secret, this.getClaim().hydroId\n//         )}\n//         onConfirmation={() => {\n//           this.removeClaim()\n//           this.props.getAccountDetails()\n//         }}\n//       />\n//\n//     {!this.props.hydroId || (this.state.activeClaim) ? null :\n//       <Fragment>\n//         <Typography variant='display1' gutterBottom color=\"textPrimary\" style={{marginTop: 20}}>\n//           Claim a New Address\n//         </Typography>\n//\n//         <Typography variant='body2' gutterBottom color=\"textPrimary\">\n//           Enter the address you{\"'\"}d like to claim below.\n//         </Typography>\n//\n//         <form noValidate autoComplete=\"off\">\n//           <TextField\n//             label='Address'\n//             helperText='Must be able to transact from this address'\n//             margin=\"normal\"\n//             value={this.state.claimAddress}\n//             onChange={e => {\n//               this.setState({claimAddress: e.target.value}, this.updateLocalClaim)\n//             }}\n//             fullWidth\n//           />\n//           <TransactionButton\n//             onConfirmation={() => {\n//               this.setState({\n//                 activeClaim: this.submittedClaim,\n//                 addressSnackbar: true\n//               })\n//             }}\n//             buttonInitial='Initiate Claim'\n//             method={() => {\n//               this.setClaim(this.claim.address, this.claim.secret, this.claim.hydroId)\n//               this.submittedClaim = this.claim\n//               return this.getContract('snowflake').methods.initiateClaim(this.claim.claim)}\n//             }\n//           />\n//         </form>\n//       </Fragment>\n//       }\n//     </div>\n//   )\n// }))\n"],"sourceRoot":""}